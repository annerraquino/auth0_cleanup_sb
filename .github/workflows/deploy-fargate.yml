name: Deploy Fargate

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: auth0-cleanup-sb     # ECR repo name (no registry)

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-fargate
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show role to assume
        run: echo "AWS_ROLE_ARN=${{ secrets.AWS_ROLE_TO_ASSUME }}"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions

      - name: Set up Java (JDK 21)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Build JAR (skip tests)
        working-directory: app
        run: mvn -q -DskipTests clean package

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        run: |
          IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${GITHUB_SHA}"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t "$IMAGE_URI" ./app
          docker push "$IMAGE_URI"

      # ---- Auto-detect Terraform module directory ----
      - name: Find Terraform module directory
        id: tfdir
        shell: bash
        run: |
          set -euo pipefail
          echo "Searching for Terraform configuration (main.tf) ..."
          TF_DIR="$(find . -maxdepth 3 -type f -name 'main.tf' -printf '%h\n' | head -n1 || true)"
          if [[ -z "${TF_DIR}" ]]; then
            echo "ERROR: No main.tf found within depth 3. Check your repo layout." >&2
            exit 1
          fi
          echo "Found Terraform directory: ${TF_DIR}"
          echo "path=${TF_DIR}" >> "$GITHUB_OUTPUT"

      - name: Debug TF dir contents
        run: |
          echo "TF DIR=${{ steps.tfdir.outputs.path }}"
          ls -la "${{ steps.tfdir.outputs.path }}"
          echo "---- All .tf files in TF DIR ----"
          find "${{ steps.tfdir.outputs.path }}" -maxdepth 1 -type f -name "*.tf" -print

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        run: terraform -chdir="${{ steps.tfdir.outputs.path }}" init -input=false

      - name: Terraform Plan
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        run: |
          terraform -chdir="${{ steps.tfdir.outputs.path }}" plan -input=false \
            -var="image_uri=${ECR_REGISTRY}/${ECR_REPOSITORY}:${GITHUB_SHA}" \
            -var="s3_bucket=${{ vars.S3_BUCKET }}" \
            -var="ssm_param_prefix=${{ vars.SSM_PARAM_PREFIX }}"

      - name: Terraform Apply
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        run: |
          terraform -chdir="${{ steps.tfdir.outputs.path }}" apply -auto-approve -input=false \
            -var="image_uri=${ECR_REGISTRY}/${ECR_REPOSITORY}:${GITHUB_SHA}" \
            -var="s3_bucket=${{ vars.S3_BUCKET }}" \
            -var="ssm_param_prefix=${{ vars.SSM_PARAM_PREFIX }}"
