name: Deploy Fargate

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: auth0-cleanup-sb
  TF_DIR: infra/terraform/envs/dev
  PROJECT_NAME: auth0-cleanup-sb     # must match local.name / var.project_name in TF

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-fargate
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions

      - name: Setup Java (JDK 21)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Build JAR (skip tests)
        working-directory: app
        run: mvn -q -DskipTests clean package

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        run: |
          IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${GITHUB_SHA}"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t "$IMAGE_URI" ./app
          docker push "$IMAGE_URI"

      - name: Debug TF dir & files
        run: |
          echo "TF_DIR=${{ env.TF_DIR }}"
          ls -la "${{ env.TF_DIR }}"
          echo "---- .tf files ----"
          find "${{ env.TF_DIR }}" -maxdepth 1 -type f -name "*.tf" -print

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        env:
          TF_VAR_image_uri:        ${{ env.IMAGE_URI }}
          TF_VAR_s3_bucket:        ${{ vars.S3_BUCKET }}
          TF_VAR_ssm_param_prefix: ${{ vars.SSM_PARAM_PREFIX }}
        run: terraform -chdir="${{ env.TF_DIR }}" init -input=false -no-color

      # Auto-import CW log group if it already exists
      - name: Import existing CloudWatch log group if present
        env:
          LOG_GROUP: /ecs/${{ env.PROJECT_NAME }}
        run: |
          set -euo pipefail
          # Already in state?
          if terraform -chdir="${TF_DIR}" state show aws_cloudwatch_log_group.app >/dev/null 2>&1; then
            echo "Log group already in Terraform state."
            exit 0
          fi

          # Exists in AWS?
          EXISTS=$(aws logs describe-log-groups \
            --log-group-name-prefix "$LOG_GROUP" \
            --query 'logGroups[?logGroupName==`'"$LOG_GROUP"'`].logGroupName' \
            --output text || true)

          if [ "$EXISTS" = "$LOG_GROUP" ]; then
            echo "Importing existing log group: $LOG_GROUP"
            terraform -chdir="${TF_DIR}" import aws_cloudwatch_log_group.app "$LOG_GROUP"
          else
            echo "No preexisting log group; Terraform will create $LOG_GROUP"
          fi

      - name: Terraform Plan
        env:
          # pass both TF_VAR_* and -var to be 100% non-interactive
          TF_VAR_image_uri:        ${{ env.IMAGE_URI }}
          TF_VAR_s3_bucket:        ${{ vars.S3_BUCKET }}
          TF_VAR_ssm_param_prefix: ${{ vars.SSM_PARAM_PREFIX }}
          ECR_REGISTRY:            ${{ steps.ecr-login.outputs.registry }}
        run: |
          terraform -chdir="${{ env.TF_DIR }}" plan -input=false -no-color \
            -var="image_uri=${IMAGE_URI}" \
            -var="s3_bucket=${{ vars.S3_BUCKET }}" \
            -var="ssm_param_prefix=${{ vars.SSM_PARAM_PREFIX }}"

      - name: Terraform Apply
        env:
          TF_VAR_image_uri:        ${{ env.IMAGE_URI }}
          TF_VAR_s3_bucket:        ${{ vars.S3_BUCKET }}
          TF_VAR_ssm_param_prefix: ${{ vars.SSM_PARAM_PREFIX }}
        run: |
          terraform -chdir="${{ env.TF_DIR }}" apply -auto-approve -input=false -no-color \
            -var="image_uri=${IMAGE_URI}" \
            -var="s3_bucket=${{ vars.S3_BUCKET }}" \
            -var="ssm_param_prefix=${{ vars.SSM_PARAM_PREFIX }}"
